/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Payment_H
#define Payment_H

#include <thrift/TDispatchProcessor.h>
#include "Payment_types.h"

namespace BossInterface {

class PaymentIf {
 public:
  virtual ~PaymentIf() {}
  virtual bool subscribe(const  ::BossData::Payment& datas) = 0;
};

class PaymentIfFactory {
 public:
  typedef PaymentIf Handler;

  virtual ~PaymentIfFactory() {}

  virtual PaymentIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PaymentIf* /* handler */) = 0;
};

class PaymentIfSingletonFactory : virtual public PaymentIfFactory {
 public:
  PaymentIfSingletonFactory(const boost::shared_ptr<PaymentIf>& iface) : iface_(iface) {}
  virtual ~PaymentIfSingletonFactory() {}

  virtual PaymentIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PaymentIf* /* handler */) {}

 protected:
  boost::shared_ptr<PaymentIf> iface_;
};

class PaymentNull : virtual public PaymentIf {
 public:
  virtual ~PaymentNull() {}
  bool subscribe(const  ::BossData::Payment& /* datas */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Payment_subscribe_args__isset {
  _Payment_subscribe_args__isset() : datas(false) {}
  bool datas;
} _Payment_subscribe_args__isset;

class Payment_subscribe_args {
 public:

  Payment_subscribe_args() {
  }

  virtual ~Payment_subscribe_args() throw() {}

   ::BossData::Payment datas;

  _Payment_subscribe_args__isset __isset;

  void __set_datas(const  ::BossData::Payment& val) {
    datas = val;
  }

  bool operator == (const Payment_subscribe_args & rhs) const
  {
    if (!(datas == rhs.datas))
      return false;
    return true;
  }
  bool operator != (const Payment_subscribe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Payment_subscribe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Payment_subscribe_pargs {
 public:


  virtual ~Payment_subscribe_pargs() throw() {}

  const  ::BossData::Payment* datas;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Payment_subscribe_result__isset {
  _Payment_subscribe_result__isset() : success(false) {}
  bool success;
} _Payment_subscribe_result__isset;

class Payment_subscribe_result {
 public:

  Payment_subscribe_result() : success(0) {
  }

  virtual ~Payment_subscribe_result() throw() {}

  bool success;

  _Payment_subscribe_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Payment_subscribe_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Payment_subscribe_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Payment_subscribe_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Payment_subscribe_presult__isset {
  _Payment_subscribe_presult__isset() : success(false) {}
  bool success;
} _Payment_subscribe_presult__isset;

class Payment_subscribe_presult {
 public:


  virtual ~Payment_subscribe_presult() throw() {}

  bool* success;

  _Payment_subscribe_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PaymentClient : virtual public PaymentIf {
 public:
  PaymentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PaymentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool subscribe(const  ::BossData::Payment& datas);
  void send_subscribe(const  ::BossData::Payment& datas);
  bool recv_subscribe();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PaymentProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PaymentIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PaymentProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_subscribe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PaymentProcessor(boost::shared_ptr<PaymentIf> iface) :
    iface_(iface) {
    processMap_["subscribe"] = &PaymentProcessor::process_subscribe;
  }

  virtual ~PaymentProcessor() {}
};

class PaymentProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PaymentProcessorFactory(const ::boost::shared_ptr< PaymentIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PaymentIfFactory > handlerFactory_;
};

class PaymentMultiface : virtual public PaymentIf {
 public:
  PaymentMultiface(std::vector<boost::shared_ptr<PaymentIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PaymentMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PaymentIf> > ifaces_;
  PaymentMultiface() {}
  void add(boost::shared_ptr<PaymentIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool subscribe(const  ::BossData::Payment& datas) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->subscribe(datas);
    }
    return ifaces_[i]->subscribe(datas);
  }

};

} // namespace

#endif
