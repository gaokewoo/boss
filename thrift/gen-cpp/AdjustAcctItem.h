/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AdjustAcctItem_H
#define AdjustAcctItem_H

#include <thrift/TDispatchProcessor.h>
#include "AdjustAcctItem_types.h"

namespace BossInterface {

class AdjustAcctItemIf {
 public:
  virtual ~AdjustAcctItemIf() {}
  virtual bool send(const  ::BossData::AdjustAcctItem& data) = 0;
};

class AdjustAcctItemIfFactory {
 public:
  typedef AdjustAcctItemIf Handler;

  virtual ~AdjustAcctItemIfFactory() {}

  virtual AdjustAcctItemIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AdjustAcctItemIf* /* handler */) = 0;
};

class AdjustAcctItemIfSingletonFactory : virtual public AdjustAcctItemIfFactory {
 public:
  AdjustAcctItemIfSingletonFactory(const boost::shared_ptr<AdjustAcctItemIf>& iface) : iface_(iface) {}
  virtual ~AdjustAcctItemIfSingletonFactory() {}

  virtual AdjustAcctItemIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AdjustAcctItemIf* /* handler */) {}

 protected:
  boost::shared_ptr<AdjustAcctItemIf> iface_;
};

class AdjustAcctItemNull : virtual public AdjustAcctItemIf {
 public:
  virtual ~AdjustAcctItemNull() {}
  bool send(const  ::BossData::AdjustAcctItem& /* data */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _AdjustAcctItem_send_args__isset {
  _AdjustAcctItem_send_args__isset() : data(false) {}
  bool data;
} _AdjustAcctItem_send_args__isset;

class AdjustAcctItem_send_args {
 public:

  AdjustAcctItem_send_args() {
  }

  virtual ~AdjustAcctItem_send_args() throw() {}

   ::BossData::AdjustAcctItem data;

  _AdjustAcctItem_send_args__isset __isset;

  void __set_data(const  ::BossData::AdjustAcctItem& val) {
    data = val;
  }

  bool operator == (const AdjustAcctItem_send_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AdjustAcctItem_send_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdjustAcctItem_send_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdjustAcctItem_send_pargs {
 public:


  virtual ~AdjustAcctItem_send_pargs() throw() {}

  const  ::BossData::AdjustAcctItem* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdjustAcctItem_send_result__isset {
  _AdjustAcctItem_send_result__isset() : success(false) {}
  bool success;
} _AdjustAcctItem_send_result__isset;

class AdjustAcctItem_send_result {
 public:

  AdjustAcctItem_send_result() : success(0) {
  }

  virtual ~AdjustAcctItem_send_result() throw() {}

  bool success;

  _AdjustAcctItem_send_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const AdjustAcctItem_send_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdjustAcctItem_send_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdjustAcctItem_send_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdjustAcctItem_send_presult__isset {
  _AdjustAcctItem_send_presult__isset() : success(false) {}
  bool success;
} _AdjustAcctItem_send_presult__isset;

class AdjustAcctItem_send_presult {
 public:


  virtual ~AdjustAcctItem_send_presult() throw() {}

  bool* success;

  _AdjustAcctItem_send_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AdjustAcctItemClient : virtual public AdjustAcctItemIf {
 public:
  AdjustAcctItemClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AdjustAcctItemClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool send(const  ::BossData::AdjustAcctItem& data);
  void send_send(const  ::BossData::AdjustAcctItem& data);
  bool recv_send();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AdjustAcctItemProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AdjustAcctItemIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AdjustAcctItemProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_send(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AdjustAcctItemProcessor(boost::shared_ptr<AdjustAcctItemIf> iface) :
    iface_(iface) {
    processMap_["send"] = &AdjustAcctItemProcessor::process_send;
  }

  virtual ~AdjustAcctItemProcessor() {}
};

class AdjustAcctItemProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AdjustAcctItemProcessorFactory(const ::boost::shared_ptr< AdjustAcctItemIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AdjustAcctItemIfFactory > handlerFactory_;
};

class AdjustAcctItemMultiface : virtual public AdjustAcctItemIf {
 public:
  AdjustAcctItemMultiface(std::vector<boost::shared_ptr<AdjustAcctItemIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AdjustAcctItemMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AdjustAcctItemIf> > ifaces_;
  AdjustAcctItemMultiface() {}
  void add(boost::shared_ptr<AdjustAcctItemIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool send(const  ::BossData::AdjustAcctItem& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send(data);
    }
    return ifaces_[i]->send(data);
  }

};

} // namespace

#endif
