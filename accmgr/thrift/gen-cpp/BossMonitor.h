/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BossMonitor_H
#define BossMonitor_H

#include <thrift/TDispatchProcessor.h>
#include "BossMonitor_types.h"

namespace BossInterface {

class BossMonitorIf {
 public:
  virtual ~BossMonitorIf() {}
  virtual bool subscirbe(const  ::BossData::BossMonitor& datas) = 0;
  virtual void getAll(std::vector< ::BossData::BossMonitor> & _return) = 0;
};

class BossMonitorIfFactory {
 public:
  typedef BossMonitorIf Handler;

  virtual ~BossMonitorIfFactory() {}

  virtual BossMonitorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BossMonitorIf* /* handler */) = 0;
};

class BossMonitorIfSingletonFactory : virtual public BossMonitorIfFactory {
 public:
  BossMonitorIfSingletonFactory(const boost::shared_ptr<BossMonitorIf>& iface) : iface_(iface) {}
  virtual ~BossMonitorIfSingletonFactory() {}

  virtual BossMonitorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BossMonitorIf* /* handler */) {}

 protected:
  boost::shared_ptr<BossMonitorIf> iface_;
};

class BossMonitorNull : virtual public BossMonitorIf {
 public:
  virtual ~BossMonitorNull() {}
  bool subscirbe(const  ::BossData::BossMonitor& /* datas */) {
    bool _return = false;
    return _return;
  }
  void getAll(std::vector< ::BossData::BossMonitor> & /* _return */) {
    return;
  }
};

typedef struct _BossMonitor_subscirbe_args__isset {
  _BossMonitor_subscirbe_args__isset() : datas(false) {}
  bool datas;
} _BossMonitor_subscirbe_args__isset;

class BossMonitor_subscirbe_args {
 public:

  BossMonitor_subscirbe_args() {
  }

  virtual ~BossMonitor_subscirbe_args() throw() {}

   ::BossData::BossMonitor datas;

  _BossMonitor_subscirbe_args__isset __isset;

  void __set_datas(const  ::BossData::BossMonitor& val) {
    datas = val;
  }

  bool operator == (const BossMonitor_subscirbe_args & rhs) const
  {
    if (!(datas == rhs.datas))
      return false;
    return true;
  }
  bool operator != (const BossMonitor_subscirbe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BossMonitor_subscirbe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BossMonitor_subscirbe_pargs {
 public:


  virtual ~BossMonitor_subscirbe_pargs() throw() {}

  const  ::BossData::BossMonitor* datas;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BossMonitor_subscirbe_result__isset {
  _BossMonitor_subscirbe_result__isset() : success(false) {}
  bool success;
} _BossMonitor_subscirbe_result__isset;

class BossMonitor_subscirbe_result {
 public:

  BossMonitor_subscirbe_result() : success(0) {
  }

  virtual ~BossMonitor_subscirbe_result() throw() {}

  bool success;

  _BossMonitor_subscirbe_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BossMonitor_subscirbe_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BossMonitor_subscirbe_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BossMonitor_subscirbe_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BossMonitor_subscirbe_presult__isset {
  _BossMonitor_subscirbe_presult__isset() : success(false) {}
  bool success;
} _BossMonitor_subscirbe_presult__isset;

class BossMonitor_subscirbe_presult {
 public:


  virtual ~BossMonitor_subscirbe_presult() throw() {}

  bool* success;

  _BossMonitor_subscirbe_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BossMonitor_getAll_args {
 public:

  BossMonitor_getAll_args() {
  }

  virtual ~BossMonitor_getAll_args() throw() {}


  bool operator == (const BossMonitor_getAll_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BossMonitor_getAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BossMonitor_getAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BossMonitor_getAll_pargs {
 public:


  virtual ~BossMonitor_getAll_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BossMonitor_getAll_result__isset {
  _BossMonitor_getAll_result__isset() : success(false) {}
  bool success;
} _BossMonitor_getAll_result__isset;

class BossMonitor_getAll_result {
 public:

  BossMonitor_getAll_result() {
  }

  virtual ~BossMonitor_getAll_result() throw() {}

  std::vector< ::BossData::BossMonitor>  success;

  _BossMonitor_getAll_result__isset __isset;

  void __set_success(const std::vector< ::BossData::BossMonitor> & val) {
    success = val;
  }

  bool operator == (const BossMonitor_getAll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BossMonitor_getAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BossMonitor_getAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BossMonitor_getAll_presult__isset {
  _BossMonitor_getAll_presult__isset() : success(false) {}
  bool success;
} _BossMonitor_getAll_presult__isset;

class BossMonitor_getAll_presult {
 public:


  virtual ~BossMonitor_getAll_presult() throw() {}

  std::vector< ::BossData::BossMonitor> * success;

  _BossMonitor_getAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BossMonitorClient : virtual public BossMonitorIf {
 public:
  BossMonitorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BossMonitorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool subscirbe(const  ::BossData::BossMonitor& datas);
  void send_subscirbe(const  ::BossData::BossMonitor& datas);
  bool recv_subscirbe();
  void getAll(std::vector< ::BossData::BossMonitor> & _return);
  void send_getAll();
  void recv_getAll(std::vector< ::BossData::BossMonitor> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BossMonitorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BossMonitorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BossMonitorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_subscirbe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BossMonitorProcessor(boost::shared_ptr<BossMonitorIf> iface) :
    iface_(iface) {
    processMap_["subscirbe"] = &BossMonitorProcessor::process_subscirbe;
    processMap_["getAll"] = &BossMonitorProcessor::process_getAll;
  }

  virtual ~BossMonitorProcessor() {}
};

class BossMonitorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BossMonitorProcessorFactory(const ::boost::shared_ptr< BossMonitorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BossMonitorIfFactory > handlerFactory_;
};

class BossMonitorMultiface : virtual public BossMonitorIf {
 public:
  BossMonitorMultiface(std::vector<boost::shared_ptr<BossMonitorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BossMonitorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BossMonitorIf> > ifaces_;
  BossMonitorMultiface() {}
  void add(boost::shared_ptr<BossMonitorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool subscirbe(const  ::BossData::BossMonitor& datas) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->subscirbe(datas);
    }
    return ifaces_[i]->subscirbe(datas);
  }

  void getAll(std::vector< ::BossData::BossMonitor> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAll(_return);
    }
    ifaces_[i]->getAll(_return);
    return;
  }

};

} // namespace

#endif
