// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/BossMonitor.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "log4z/log4z.h"
#include "libconfparser/confparser.hpp"
#include <algorithm>
#include <iterator>

using namespace zsummer::log4z;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::BossInterface;

class BossMonitorHandler : virtual public BossMonitorIf {
 public:
  BossMonitorHandler(LoggerId logId) {
    // Your initialization goes here
    m_logId = logId;
  }

  bool subscirbe(const  ::BossData::BossMonitor& datas) {
    // Your implementation goes here
    LOG_INFO(m_logId, "One server is registering.");
    LOG_INFO(m_logId, "Process ID:"<<datas.id);
    LOG_INFO(m_logId, "Process Name:"<<datas.name);
    LOG_INFO(m_logId, "Listening IP:"<<datas.ip);
    LOG_INFO(m_logId, "Listening Port:"<<datas.port);
    LOG_INFO(m_logId, "Process Status:"<<datas.status);

    m_datas.push_back(datas);

    return true;
  }

  void getAll(std::vector< ::BossData::BossMonitor> & _return) {
    // Your implementation goes here
    LOG_INFO(m_logId, "Request all processes status.");
    std::vector< ::BossData::BossMonitor>::iterator it;
    for (it=m_datas.begin(); it!=m_datas.end(); it++)
    {
        _return.push_back(*it);
    }
    //copy(m_datas.begin(), m_datas.end(), _return.begin());
  }

 private:
  std::vector< ::BossData::BossMonitor> m_datas;
  LoggerId m_logId;

};

void mkDaemon(void)
{
    pid_t pid;
    pid_t sid;

    pid = fork();
    if (pid == -1)
      printf("Failed to fork() ");

    if (pid) {
        exit(0);
    }

    sid = setsid();
    if (sid == -1)
      abort();
    return;
} 

int main(int argc, char **argv) {

    mkDaemon();

    LoggerId logId;
    ILog4zManager::GetInstance()->Config("../conf/log.cfg");
    logId = ILog4zManager::GetInstance()->FindLogger("BossMonitor");
    ILog4zManager::GetInstance()->Start();

    LOG_INFO(logId, "Parse boss.cfg");
    CONF_PARSER_SIMPLE_INIT("../conf/boss.cfg");
    int port = CONF_PARSER_GET_NUM_VAL("BossMonitor", "port");
    LOG_INFO(logId, "Server listening port:"<<port);

    shared_ptr<BossMonitorHandler> handler(new BossMonitorHandler(logId));
    shared_ptr<TProcessor> processor(new BossMonitorProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}
