// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/FetchNbr.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "libconfparser/confparser.hpp"
#include "BossMonitorClient.hh"
#include "FetchNbr.hh"
#include "log4z/log4z.h"


using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::BossInterface;

using namespace zsummer::log4z;

class FetchNbrHandler : virtual public FetchNbrIf {
    public:
        FetchNbrHandler(LoggerId logId) {
            // Your initialization goes here
            m_logId = logId;
            m_fetch_nbr = new FetchNbr(m_logId);
        }

        ~FetchNbrHandler() {
            // Your initialization goes here
            delete m_fetch_nbr ;
            m_fetch_nbr =NULL;
        }

        void fetchNbr(std::string& _return) {
            // Your implementation goes here
            _return = m_fetch_nbr->doBiz();
        }

    private:
        FetchNbr *m_fetch_nbr;
        LoggerId m_logId;

};

void mkDaemon(void)
{
    pid_t pid;
    pid_t sid;

    pid = fork();
    if (pid == -1)
      printf("Failed to fork() ");

    if (pid) {
        exit(0);
    }

    sid = setsid();
    if (sid == -1)
      abort();
    return;
} 

int main(int argc, char **argv) {

    mkDaemon();

    LoggerId logId;
    ILog4zManager::GetInstance()->Config("../conf/log.cfg");
    logId = ILog4zManager::GetInstance()->FindLogger("FetchNbr");
    ILog4zManager::GetInstance()->Start();

    LOG_INFO(logId, "Parse boss.cfg");
    CONF_PARSER_SIMPLE_INIT("../conf/boss.cfg");
    int port = CONF_PARSER_GET_NUM_VAL("FetchNbr", "port");
    LOG_INFO(logId, "Server listening port:"<<port);

    shared_ptr<FetchNbrHandler> handler(new FetchNbrHandler(logId));
    shared_ptr<TProcessor> processor(new FetchNbrProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    ::BossMonitorClient client;
    BossData::BossMonitor data;
    data.id=getpid();
    data.name=basename(argv[0]);
    data.status="Active";
    data.ip=CONF_PARSER_GET_VAL("FetchNbr", "ip");;
    data.port=port;
    client.subscribe(data);

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}

