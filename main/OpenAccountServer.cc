// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/OpenAccountServlet.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>
#include "OpenAccount.hh"
#include "libconfparser/confparser.hpp"
#include "BossMonitorClient.hh"
#include <libgen.h>
#include <queue>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

using boost::shared_ptr;

using namespace  ::BossInterface;

class OpenAccountPool
{
    public:
        OpenAccountPool(LoggerId logId, int poolNum=10)
        {
            //qready = PTHREAD_COND_INITIALIZER;
            //qlock = PTHREAD_MUTEX_INITIALIZER;
            pthread_cond_init(&qready, NULL);
            pthread_mutex_init(&qlock, NULL);

            for(int i=0; i<poolNum; i++)
            {
                m_queue.push(new OpenAccount(logId));
            }
        }

        ~OpenAccountPool()
        {
            while(!m_queue.empty())
            {
                OpenAccount *p = m_queue.front();
                m_queue.pop();

                delete p;
            }
        }

        OpenAccount* get()
        {
            pthread_mutex_lock(&qlock);

            while(m_queue.empty())
            {
                pthread_cond_wait(&qready, &qlock);
            }

            OpenAccount *p = m_queue.front();
            m_queue.pop();

            pthread_mutex_unlock(&qlock);

            return p;
        }

        void put(OpenAccount *p)
        {
            pthread_mutex_lock(&qlock);
            m_queue.push(p);
            pthread_mutex_unlock(&qlock);
            pthread_cond_signal(&qready);
        }

    private:
        queue<OpenAccount*> m_queue;
        pthread_cond_t qready;
        pthread_mutex_t qlock;
};

class OpenAccountServletHandler : virtual public OpenAccountServletIf {
    public:
        OpenAccountServletHandler(LoggerId logId) {
            // Your initialization goes here
            m_logId = logId;
            m_open_account_pool=new OpenAccountPool(m_logId);
        }

        ~OpenAccountServletHandler() {
            // Your initialization goes here
            delete m_open_account_pool;
            m_open_account_pool=NULL;
        }

        bool send(const  ::BossData::OpenAccount& data) {
            // Your implementation goes here
            LOG_INFO(m_logId, "Receive a message...");
            AccountData account_data;
            account_data.nbr = data.nbr;
            account_data.name = data.name;
            account_data.gender = data.gender;
            account_data.idNo = data.idNo;
            account_data.address = data.address;
            OpenAccount *p = m_open_account_pool->get();
            p->doBiz(account_data);
            m_open_account_pool->put(p);
            LOG_INFO(m_logId, "Server handle successfully.");

            return true;
        }

    private:
        OpenAccountPool *m_open_account_pool;
        LoggerId m_logId;
};

void mkDaemon(void)
{
    pid_t pid;
    pid_t sid;

    pid = fork();
    if (pid == -1)
      printf("Failed to fork() ");

    if (pid) {
        exit(0);
    }

    sid = setsid();
    if (sid == -1)
      abort();
    return;
} 

int main(int argc, char **argv) {

    mkDaemon();

    LoggerId logId;
    ILog4zManager::GetInstance()->Config("../conf/log.cfg");
    logId = ILog4zManager::GetInstance()->FindLogger("OpenAccount");
    ILog4zManager::GetInstance()->Start();

    LOG_INFO(logId, "Parse boss.cfg");
    CONF_PARSER_SIMPLE_INIT("../conf/boss.cfg");
    int port = CONF_PARSER_GET_NUM_VAL("OpenAccount", "port");
    LOG_INFO(logId, "Server listening port:"<<port);

    shared_ptr<OpenAccountServletHandler> handler(new OpenAccountServletHandler(logId));
    shared_ptr<TProcessor> processor(new OpenAccountServletProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    ::BossMonitorClient client;
    BossData::BossMonitor data;
    data.id=getpid();
    data.name=basename(argv[0]);
    data.status="Active";
    data.ip=CONF_PARSER_GET_VAL("OpenAccount", "ip");;
    data.port=port;
    client.subscribe(data);

    shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(10);
    shared_ptr<PosixThreadFactory> threadFactory = shared_ptr<PosixThreadFactory>(new PosixThreadFactory());

    threadManager->threadFactory(threadFactory);
    threadManager->start();

    TThreadPoolServer server(processor, serverTransport, transportFactory, protocolFactory, threadManager);
    server.serve();
    return 0;
}

